package com.winthier.title;

import lombok.Value;
import org.bukkit.Color;
import org.bukkit.Location;
import org.bukkit.Particle;
import org.bukkit.util.Vector;

@Value
public final class ShinePlace {
    private final Location offset;
    private final Vector right;
    private final Vector up;
    private final double scale;

    public static ShinePlace of(Location location, double scale) {
        return of(location, new Vector(0, 0, 0), scale);
    }

    public static ShinePlace of(Location location, Vector add, double scale) {
        location.setPitch(0f);
        Vector right = location.getDirection()
            .normalize()
            .rotateAroundY(Math.PI * -0.5);
        Vector up = new Vector(0, 1, 0);
        return new ShinePlace(location.add(add), right, up, scale);
    }

    public Vector right() {
        return right.clone();
    }

    public Vector up() {
        return up.clone();
    }

    public void show(Shine shine) {
        switch (shine) {
        case PRIDE: {
            int[][] colors = {
                {255, 0, 0},
                {255, 127, 0},
                {255, 255, 0},
                {0, 255, 0},
                {0, 0, 255},
                {46, 43, 95},
                {130, 0, 255}
            };
            double[][][] points = {
                {{1.00, 0.00}, {0.97, 0.19}, {0.87, 0.37}, {0.71, 0.53}, {0.50, 0.65}, {0.26, 0.72},
                 {0.00, 0.75}, {-0.26, 0.72}, {-0.50, 0.65}, {-0.71, 0.53}, {-0.87, 0.37}, {-0.97, 0.19}},
                {{1.00, -0.15}, {0.97, 0.04}, {0.87, 0.22}, {0.71, 0.38}, {0.50, 0.50}, {0.26, 0.57},
                 {0.00, 0.60}, {-0.26, 0.57}, {-0.50, 0.50}, {-0.71, 0.38}, {-0.87, 0.22}, {-0.97, 0.04}},
                {{1.00, -0.30}, {0.97, -0.11}, {0.87, 0.07}, {0.71, 0.23}, {0.50, 0.35}, {0.26, 0.42},
                 {0.00, 0.45}, {-0.26, 0.42}, {-0.50, 0.35}, {-0.71, 0.23}, {-0.87, 0.07}, {-0.97, -0.11}},
                {{1.00, -0.45}, {0.97, -0.26}, {0.87, -0.08}, {0.71, 0.08}, {0.50, 0.20}, {0.26, 0.27},
                 {0.00, 0.30}, {-0.26, 0.27}, {-0.50, 0.20}, {-0.71, 0.08}, {-0.87, -0.08}, {-0.97, -0.26}},
                {{1.00, -0.60}, {0.97, -0.41}, {0.87, -0.23}, {0.71, -0.07}, {0.50, 0.05}, {0.26, 0.12},
                 {0.00, 0.15}, {-0.26, 0.12}, {-0.50, 0.05}, {-0.71, -0.07}, {-0.87, -0.23}, {-0.97, -0.41}},
                {{1.00, -0.75}, {0.97, -0.56}, {0.87, -0.38}, {0.71, -0.22}, {0.50, -0.10}, {0.26, -0.03},
                 {0.00, 0.00}, {-0.26, -0.03}, {-0.50, -0.10}, {-0.71, -0.22}, {-0.87, -0.38}, {-0.97, -0.56}},
                {{1.00, -0.90}, {0.97, -0.71}, {0.87, -0.52}, {0.71, -0.37}, {0.50, -0.25}, {0.26, -0.18},
                 {0.00, -0.15}, {-0.26, -0.18}, {-0.50, -0.25}, {-0.71, -0.37}, {-0.87, -0.52}, {-0.97, -0.71}}
            };
            for (int i = 0; i < points.length; i += 1) {
                double[][] segment = points[i];
                int[] color = colors[i];
                Particle.DustOptions dust = new Particle.DustOptions(Color.fromRGB(color[0], color[1], color[2]), 1.5f);
                for (double[] p : segment) {
                    showParticle(Particle.REDSTONE, dust, 1, p[0], p[1]);
                }
            }
            break;
        }
        case SHAMROCK: {
            double[][] shamrockPoints = {
                {-0.29, 1.00}, {-0.14, 1.00}, {0.14, 1.00}, {0.29, 1.00}, {-0.43, 0.86},
                {0.00, 0.86}, {0.43, 0.86}, {-0.57, 0.71}, {0.57, 0.71}, {-0.57, 0.57}, {0.00, 0.57},
                {0.57, 0.57}, {-0.57, 0.43}, {0.00, 0.43}, {0.57, 0.43}, {-0.71, 0.29},
                {-0.57, 0.29}, {0.57, 0.29}, {0.71, 0.29}, {-0.86, 0.14}, {-0.43, 0.14},
                {0.43, 0.14}, {0.86, 0.14}, {-1.00, 0.00}, {1.00, 0.00}, {-1.00, -0.14},
                {-0.43, -0.14}, {-0.29, -0.14}, {0.29, -0.14}, {0.43, -0.14}, {1.00, -0.14},
                {-0.86, -0.29}, {-0.57, -0.29}, {0.57, -0.29}, {0.86, -0.29}, {-1.00, -0.43},
                {0.00, -0.43}, {1.00, -0.43}, {-1.00, -0.57}, {-0.14, -0.57}, {0.00, -0.57},
                {0.14, -0.57}, {1.00, -0.57}, {-0.86, -0.71}, {-0.29, -0.71}, {0.00, -0.71},
                {0.29, -0.71}, {0.86, -0.71}, {-0.71, -0.86}, {-0.57, -0.86}, {-0.43, -0.86},
                {0.00, -0.86}, {0.14, -0.86}, {0.43, -0.86}, {0.57, -0.86}, {0.71, -0.86},
                {0.14, -1.00}
            };
            for (double[] p : shamrockPoints) {
                showParticle(Particle.VILLAGER_HAPPY, null, 4, 0.035, p[0], p[1]);
            }
            break;
        }
        case PI: {
            double[][] piPoints = {
                {-0.83, 1.00}, {-0.67, 1.00}, {-0.50, 1.00}, {-0.33, 1.00}, {-0.17, 1.00},
                {0.00, 1.00}, {0.17, 1.00}, {0.33, 1.00}, {0.50, 1.00}, {0.67, 1.00}, {0.83, 1.00},
                {1.00, 1.00}, {-1.00, 0.83}, {-0.83, 0.83}, {-0.67, 0.83}, {-0.50, 0.83},
                {-0.33, 0.83}, {-0.17, 0.83}, {0.00, 0.83}, {0.17, 0.83}, {0.33, 0.83},
                {0.50, 0.83}, {0.67, 0.83}, {0.83, 0.83}, {1.00, 0.83}, {-1.00, 0.67}, {-0.83, 0.67},
                {-0.50, 0.67}, {-0.33, 0.67}, {0.33, 0.67}, {0.50, 0.67}, {-1.00, 0.50},
                {-0.50, 0.50}, {-0.33, 0.50}, {0.33, 0.50}, {0.50, 0.50}, {-0.50, 0.33},
                {-0.33, 0.33}, {0.17, 0.33}, {0.33, 0.33}, {-0.50, 0.17}, {-0.33, 0.17},
                {0.17, 0.17}, {0.33, 0.17}, {-0.50, 0.00}, {-0.33, 0.00}, {0.17, 0.00}, {0.33, 0.00},
                {-0.50, -0.17}, {-0.33, -0.17}, {0.17, -0.17}, {0.33, -0.17}, {-0.67, -0.33},
                {-0.50, -0.33}, {-0.33, -0.33}, {0.17, -0.33}, {0.33, -0.33}, {-0.67, -0.50},
                {-0.50, -0.50}, {0.17, -0.50}, {0.33, -0.50}, {0.50, -0.50}, {1.00, -0.50},
                {-0.83, -0.67}, {-0.67, -0.67}, {-0.50, -0.67}, {0.33, -0.67}, {0.50, -0.67},
                {0.67, -0.67}, {0.83, -0.67}, {1.00, -0.67}, {-0.83, -0.83}, {-0.67, -0.83},
                {-0.50, -0.83}, {0.33, -0.83}, {0.50, -0.83}, {0.67, -0.83}, {0.83, -0.83},
                {-0.67, -1.00}, {0.50, -1.00}, {0.67, -1.00},
            };
            double[][] circlePoints = {
                {1.00, 0.00}, {0.98, 0.17}, {0.94, 0.34}, {0.87, 0.50}, {0.77, 0.64}, {0.64, 0.77},
                {0.50, 0.87}, {0.34, 0.94}, {0.17, 0.98}, {0.00, 1.00}, {-0.17, 0.98}, {-0.34, 0.94},
                {-0.50, 0.87}, {-0.64, 0.77}, {-0.77, 0.64}, {-0.87, 0.50}, {-0.94, 0.34},
                {-0.98, 0.17}, {-1.00, 0.00}, {-0.98, -0.17}, {-0.94, -0.34}, {-0.87, -0.50},
                {-0.77, -0.64}, {-0.64, -0.77}, {-0.50, -0.87}, {-0.34, -0.94}, {-0.17, -0.98},
                {-0.00, -1.00}, {0.17, -0.98}, {0.34, -0.94}, {0.50, -0.87}, {0.64, -0.77},
                {0.77, -0.64}, {0.87, -0.50}, {0.94, -0.34}, {0.98, -0.17}
            };
            Particle.DustOptions dust = new Particle.DustOptions(Color.fromRGB(0, 191, 255), 1.6f);
            for (double[] p : piPoints) {
                showParticle(Particle.REDSTONE, dust, 1, p[0] * 0.8, p[1] * 0.8);
            }
            for (double[] p : circlePoints) {
                showParticle(Particle.END_ROD, null, 1, p[0] * 1.2, p[1] * 1.2);
            }
            break;
        }
        case STAR: {
            double[][] points = {
                {0.00, 1.00}, {-0.14, 0.87}, {0.14, 0.87}, {-0.14, 0.73}, {0.14, 0.73},
                {-0.29, 0.60}, {0.29, 0.60}, {-0.29, 0.47}, {0.29, 0.47}, {-1.00, 0.33},
                {-0.86, 0.33}, {-0.71, 0.33}, {-0.57, 0.33}, {-0.43, 0.33}, {0.43, 0.33},
                {0.57, 0.33}, {0.71, 0.33}, {0.86, 0.33}, {1.00, 0.33}, {-1.00, 0.20},
                {1.00, 0.20}, {-0.86, 0.07}, {-0.14, 0.07}, {0.14, 0.07}, {0.86, 0.07},
                {-0.71, -0.07}, {-0.14, -0.07}, {0.14, -0.07}, {0.71, -0.07},
                {-0.57, -0.20}, {-0.14, -0.20}, {0.14, -0.20}, {0.57, -0.20},
                {-0.71, -0.33}, {0.71, -0.33}, {-0.71, -0.47}, {0.71, -0.47},
                {-0.86, -0.60}, {0.00, -0.60}, {0.86, -0.60}, {-0.86, -0.73},
                {-0.29, -0.73}, {-0.14, -0.73}, {0.14, -0.73}, {0.29, -0.73},
                {0.86, -0.73}, {-1.00, -0.87}, {-0.57, -0.87}, {-0.43, -0.87},
                {0.43, -0.87}, {0.57, -0.87}, {1.00, -0.87}, {-1.00, -1.00},
                {-0.86, -1.00}, {-0.71, -1.00}, {0.71, -1.00}, {0.86, -1.00},
                {1.00, -1.00}
            };
            Particle.DustOptions dust = new Particle.DustOptions(Color.fromRGB(255, 255, 0), 2.0f);
            for (double[] p : points) {
                showParticle(Particle.REDSTONE, dust, 2, p[0] * 1.25, p[1] * 1.25);
            }
            break;
        }
        case HEART:
        default: {
            double[][] points = {
                {-0.60, 1.00},
                {-0.40, 1.00},
                {0.40, 1.00},
                {0.60, 1.00},
                {-0.80, 0.78},
                {-0.20, 0.78},
                {0.20, 0.78},
                {0.80, 0.78},
                {-1.00, 0.56},
                {0.00, 0.56},
                {1.00, 0.56},
                {-1.00, 0.33},
                {1.00, 0.33},
                {-1.00, 0.11},
                {1.00, 0.11},
                {-0.80, -0.11},
                {0.80, -0.11},
                {-0.60, -0.33},
                {0.60, -0.33},
                {-0.40, -0.56},
                {0.40, -0.56},
                {-0.20, -0.78},
                {0.20, -0.78},
                {0.00, -1.00}
            };
            for (double[] p : points) {
                showParticle(Particle.HEART, null, 8, p[0], p[1]);
            }
            break;
        }
        }
    }

    public <T> void showParticle(Particle particle, T data, int amount, double x, double y) {
        Vector v = offset.toVector()
            .add(right().multiply(x * scale))
            .add(up().multiply(y * scale));
        offset.getWorld().spawnParticle(particle, v.getX(), v.getY(), v.getZ(), amount, 0.0, 0.0, 0.0, 0.0, data);
    }

    public <T> void showParticle(Particle particle, T data, int amount, double spread, double x, double y) {
        Vector v = offset.toVector()
            .add(right().multiply(x * scale))
            .add(up().multiply(y * scale));
        offset.getWorld().spawnParticle(particle, v.getX(), v.getY(), v.getZ(), amount, spread, spread, spread, 0.0, data);
    }
}
